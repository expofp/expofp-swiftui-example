// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CrowdConnectedShared
import CoreLocation
import CoreMotion
@_exported import CrowdConnectedShared
import Foundation
import Swift
import _Concurrency
@_hasMissingDesignatedInitializers public class MainLogger {
  public static func log(level: CrowdConnectedShared.LogLevel, message: @autoclosure () -> Swift.String)
  public static func log(level: CrowdConnectedShared.LogLevel, error: CrowdConnectedShared.DescriptiveError)
  @objc deinit
}
extension CoreLocation.CLLocationCoordinate2D : Swift.Equatable {
  public static func == (lhs: CoreLocation.CLLocationCoordinate2D, rhs: CoreLocation.CLLocationCoordinate2D) -> Swift.Bool
}
public enum ReactiveNotification : Swift.String {
  case updateSettings
  case updateBeacons
  case updateSurfaces
  case updateZones
  case updateBluetoothSettings
  case updateGeoSettings
  case newPositionsAvailable
  case newStepsAvailable
  case newBluetoothObservationsAvailable
  case receivedEddystoneObservation
  case newDeviceLocationAuthorizationStatus
  case newDeviceAccuracyAuthorizationStatus
  case newDeviceMotionAuthorizationStatus
  case newDevicePedometerAuthorizationStatus
  case ipsModuleState
  case coreBluetoothModuleState
  case geoModuleState
  case startLibrary
  case stopLibrary
  case startNavigationSession
  case endNavigationSession
  case newRemoteLog
  case significantClockUpdate
  case newCredentials
  case updateDataPublishRule
  case startMonitoringRegions
  case stopMonitoringRegions
  case determineStateForMonitoredRegions
  case didEnterRegion
  case didExitRegion
  case updateTrackingMode
  case uploadRecords
  case invalidAccessToken
  public var name: Foundation.NSNotification.Name {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class UptimeClock {
  public static func getMilliseconds() -> Swift.Double
  public static func getSeconds() -> Swift.Double
  @objc deinit
}
public protocol Logger {
  func log(level: CrowdConnectedShared.LogLevel, message: @autoclosure () -> Swift.String)
}
public enum LogLevel : Swift.String, Swift.CaseIterable {
  case debug
  case info
  case notice
  case error
  case critical
  case remote
  public init?(rawValue: Swift.String)
  public typealias AllCases = [CrowdConnectedShared.LogLevel]
  public typealias RawValue = Swift.String
  public static var allCases: [CrowdConnectedShared.LogLevel] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension Swift.Double {
  public func radianToDegree() -> Swift.Double
  public func roundTo4thDecimal() -> Swift.Double
  public func roundToDecimals(_ decimalNumber: Swift.Int) -> Swift.Double
}
public protocol TimeSynchroniser {
  func syncTime(remote remoteTime: Swift.Double, latency: Swift.Double)
}
@_hasMissingDesignatedInitializers public class SyncClock : CrowdConnectedShared.Clock, CrowdConnectedShared.TimeSynchroniser {
  public static let shared: CrowdConnectedShared.SyncClock
  public func syncTime(remote rawRemoteTime: Swift.Double, latency: Swift.Double)
  public func currentDate() -> Foundation.Date
  public func currentTimeInMilliseconds() -> Swift.Int64
  public func currentTimeInNanoseconds() -> Swift.Int64
  public func adjustedTime(for internalDate: Foundation.Date) -> Foundation.Date
  public func adjustedTime(for internalTimeInterval: Foundation.TimeInterval) -> Foundation.Date
  public func matchingDate(for logItem: CoreMotion.CMLogItem) -> Foundation.Date
  @objc deinit
}
extension Swift.Array {
  public func chunked(into size: Swift.Int) -> [[Element]]
}
extension Foundation.Date {
  public func secondsSince(date: Foundation.Date) -> Foundation.TimeInterval
  public func milliseconds() -> Swift.Int64
  public func nanoseconds() -> Swift.Int64
  public func timeAfter(seconds: Swift.Double) -> Foundation.Date
  public func timeBefore(seconds: Swift.Double) -> Foundation.Date
}
@_hasMissingDesignatedInitializers public class DeviceClock : CrowdConnectedShared.Clock, CrowdConnectedShared.TimeSynchroniser {
  public static let shared: CrowdConnectedShared.DeviceClock
  public func currentDate() -> Foundation.Date
  public func currentTimeInMilliseconds() -> Swift.Int64
  public func currentTimeInNanoseconds() -> Swift.Int64
  public func adjustedTime(for internalDate: Foundation.Date) -> Foundation.Date
  public func adjustedTime(for internalTimeInterval: Foundation.TimeInterval) -> Foundation.Date
  public func syncTime(remote remoteTime: Swift.Double, latency: Swift.Double)
  public func matchingDate(for logItem: CoreMotion.CMLogItem) -> Foundation.Date
  @objc deinit
}
@propertyWrapper public class Atomic<Value> {
  public var wrappedValue: Value {
    get
    set
  }
  public init(wrappedValue: Value)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ReactiveNotificationsCenter : CrowdConnectedShared.ReactiveNotificationsProtocol {
  public static let shared: CrowdConnectedShared.ReactiveNotificationsCenter
  public func post(notification: CrowdConnectedShared.ReactiveNotification, dictionary: CrowdConnectedShared.ReactiveNotificationsCenter.NotificationData = nil)
  public func addObserver(_ observer: Any, for notification: CrowdConnectedShared.ReactiveNotification, selector: ObjectiveC.Selector)
  public func removeObserver(_ observer: Any, for notification: CrowdConnectedShared.ReactiveNotification)
  public func getState(of notification: CrowdConnectedShared.ReactiveNotification) -> CrowdConnectedShared.ReactiveNotificationsCenter.NotificationData
  @objc deinit
}
public enum CrowdConnectedDecodingError : Swift.Error, CrowdConnectedShared.DescribingError {
  case decodingFailed(message: Swift.String)
  case typeNotMatching(key: Swift.String)
  case valueNotMatching(type: Swift.String, key: Swift.String)
  case other(error: Swift.Error)
  public var descriptiveError: CrowdConnectedShared.DescriptiveError {
    get
  }
  public static func extractDecodingError(_ error: Swift.Error) -> CrowdConnectedShared.CrowdConnectedDecodingError
}
public protocol Clock {
  func currentDate() -> Foundation.Date
  func currentTimeInMilliseconds() -> Swift.Int64
  func currentTimeInNanoseconds() -> Swift.Int64
  func adjustedTime(for internalDate: Foundation.Date) -> Foundation.Date
  func adjustedTime(for internalTimeInterval: Foundation.TimeInterval) -> Foundation.Date
  func matchingDate(for logItem: CoreMotion.CMLogItem) -> Foundation.Date
}
public protocol ReactiveNotificationsProtocol {
  typealias NotificationData = [Swift.String : Swift.AnyHashable]?
  func post(notification: CrowdConnectedShared.ReactiveNotification, dictionary: Self.NotificationData)
  func addObserver(_ observer: Any, for notification: CrowdConnectedShared.ReactiveNotification, selector: ObjectiveC.Selector)
  func removeObserver(_ observer: Any, for notification: CrowdConnectedShared.ReactiveNotification)
  func getState(of notification: CrowdConnectedShared.ReactiveNotification) -> Self.NotificationData
}
extension CrowdConnectedShared.ReactiveNotificationsProtocol {
  public func post(notification: CrowdConnectedShared.ReactiveNotification)
}
public enum DataType {
  case positions
  case steps
  case bluetoothObservations
  public var title: Swift.String {
    get
  }
  public static func == (a: CrowdConnectedShared.DataType, b: CrowdConnectedShared.DataType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PositionDataType : Swift.String {
  case geo
  case cartesian
  public var exportValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TrackingMode : Swift.Int {
  case foreground
  case background
  case deactivated
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Swift.Float {
  public func cutToDecimals(_ decimalsNumber: Swift.Int) -> Swift.Double
}
public enum CrowdConnectedConstants {
  public static let geoZonesRegionIdentifier: Swift.String
}
public enum CrowdConnectedWrapperKey : Swift.String {
  case string
  case number
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct StringCodingKey {
  public init(codingKey: Swift.CodingKey, rawKey: Swift.String)
}
public protocol CrowdConnectedCodable : Swift.Decodable, Swift.Encodable {
  static func getStringValue<T>(for key: CrowdConnectedShared.StringCodingKey, from container: Swift.KeyedDecodingContainer<T>, wrapperKey: CrowdConnectedShared.CrowdConnectedWrapperKey) throws -> Swift.String where T : Swift.CodingKey
  static func getIntValue<T>(for key: CrowdConnectedShared.StringCodingKey, from container: Swift.KeyedDecodingContainer<T>, wrapperKey: CrowdConnectedShared.CrowdConnectedWrapperKey) throws -> Swift.Int where T : Swift.CodingKey
  static func getDoubleValue<T>(for key: CrowdConnectedShared.StringCodingKey, from container: Swift.KeyedDecodingContainer<T>, wrapperKey: CrowdConnectedShared.CrowdConnectedWrapperKey) throws -> Swift.Double where T : Swift.CodingKey
  static func getOptionalIntValue<T>(for key: CrowdConnectedShared.StringCodingKey, from container: Swift.KeyedDecodingContainer<T>, wrapperKey: CrowdConnectedShared.CrowdConnectedWrapperKey) -> Swift.Int? where T : Swift.CodingKey
  static func getOptionalDoubleValue<T>(for key: CrowdConnectedShared.StringCodingKey, from container: Swift.KeyedDecodingContainer<T>, wrapperKey: CrowdConnectedShared.CrowdConnectedWrapperKey) -> Swift.Double? where T : Swift.CodingKey
}
extension CrowdConnectedShared.CrowdConnectedCodable {
  public static func getStringValue<T>(for key: CrowdConnectedShared.StringCodingKey, from container: Swift.KeyedDecodingContainer<T>, wrapperKey: CrowdConnectedShared.CrowdConnectedWrapperKey = .string) throws -> Swift.String where T : Swift.CodingKey
  public static func getIntValue<T>(for key: CrowdConnectedShared.StringCodingKey, from container: Swift.KeyedDecodingContainer<T>, wrapperKey: CrowdConnectedShared.CrowdConnectedWrapperKey = .number) throws -> Swift.Int where T : Swift.CodingKey
  public static func getDoubleValue<T>(for key: CrowdConnectedShared.StringCodingKey, from container: Swift.KeyedDecodingContainer<T>, wrapperKey: CrowdConnectedShared.CrowdConnectedWrapperKey = .number) throws -> Swift.Double where T : Swift.CodingKey
  public static func getOptionalStringValue<T>(for key: CrowdConnectedShared.StringCodingKey, from container: Swift.KeyedDecodingContainer<T>, wrapperKey: CrowdConnectedShared.CrowdConnectedWrapperKey = .string) -> Swift.String? where T : Swift.CodingKey
  public static func getOptionalIntValue<T>(for key: CrowdConnectedShared.StringCodingKey, from container: Swift.KeyedDecodingContainer<T>, wrapperKey: CrowdConnectedShared.CrowdConnectedWrapperKey = .number) -> Swift.Int? where T : Swift.CodingKey
  public static func getOptionalDoubleValue<T>(for key: CrowdConnectedShared.StringCodingKey, from container: Swift.KeyedDecodingContainer<T>, wrapperKey: CrowdConnectedShared.CrowdConnectedWrapperKey = .number) -> Swift.Double? where T : Swift.CodingKey
}
public struct DataPublishRule : Swift.Codable, Swift.Hashable {
  public init(shouldPublishPositionData: Swift.Bool, shouldPublishRawObservationData: Swift.Bool)
  public var shouldPublishPositionData: Swift.Bool
  public var shouldPublishRawObservationData: Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: CrowdConnectedShared.DataPublishRule, b: CrowdConnectedShared.DataPublishRule) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public protocol DescribingError {
  var descriptiveError: CrowdConnectedShared.DescriptiveError { get }
}
public struct DescriptiveError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public init(name: Swift.String, message: Swift.String? = nil, code: Swift.Int? = nil)
  public init(_ error: Swift.Error)
}
extension CrowdConnectedShared.ReactiveNotification : Swift.Equatable {}
extension CrowdConnectedShared.ReactiveNotification : Swift.Hashable {}
extension CrowdConnectedShared.ReactiveNotification : Swift.RawRepresentable {}
extension CrowdConnectedShared.LogLevel : Swift.Equatable {}
extension CrowdConnectedShared.LogLevel : Swift.Hashable {}
extension CrowdConnectedShared.LogLevel : Swift.RawRepresentable {}
extension CrowdConnectedShared.DataType : Swift.Equatable {}
extension CrowdConnectedShared.DataType : Swift.Hashable {}
extension CrowdConnectedShared.PositionDataType : Swift.Equatable {}
extension CrowdConnectedShared.PositionDataType : Swift.Hashable {}
extension CrowdConnectedShared.PositionDataType : Swift.RawRepresentable {}
extension CrowdConnectedShared.TrackingMode : Swift.Equatable {}
extension CrowdConnectedShared.TrackingMode : Swift.Hashable {}
extension CrowdConnectedShared.TrackingMode : Swift.RawRepresentable {}
extension CrowdConnectedShared.CrowdConnectedWrapperKey : Swift.Equatable {}
extension CrowdConnectedShared.CrowdConnectedWrapperKey : Swift.Hashable {}
extension CrowdConnectedShared.CrowdConnectedWrapperKey : Swift.RawRepresentable {}
