// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ExpoFpFplan
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import ExpoFpCommon
import Foundation
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import UniformTypeIdentifiers
import WebKit
import _Concurrency
import _StringProcessing
public struct Booth : Swift.Decodable {
  public let id: Swift.Int
  public let name: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FSWebView : WebKit.WKWebView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var safeAreaInsets: UIKit.UIEdgeInsets {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, configuration: WebKit.WKWebViewConfiguration)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct Helper {
  public static func getEventAddress(_ url: Swift.String) -> Swift.String
  public static func getParams(_ url: Swift.String) -> Swift.String
  public static func getEventId(_ url: Swift.String) -> Swift.String
  public static func loadHtmlFile(configuration: ExpoFpFplan.Configuration, callback: @escaping ((_ html: Swift.String) -> Swift.Void))
  public static func saveConfiguration(_ configuration: ExpoFpFplan.Configuration, fplanConfigPath: Foundation.URL) throws
  public static func parseConfigurationJson(_ json: Foundation.Data) throws -> ExpoFpFplan.Configuration
  public static func loadConfiguration(fplanConfigPath: Foundation.URL) throws -> ExpoFpFplan.Configuration
  public static func loadConfiguration(_ configuration: ExpoFpFplan.Configuration?, fplanConfigUrl: Foundation.URL, eventUrl: Swift.String, callback: @escaping ((_ configuration: ExpoFpFplan.Configuration) -> Swift.Void))
  public static func createHtmlFile(filePath: Foundation.URL, html: Swift.String, noOverlay: Swift.Bool, baseUrl: Swift.String, eventId: Swift.String) throws
  public static func getCacheDirectory() -> Foundation.URL
  public static func getDefaultConfiguration(baseUrl: Swift.String) -> ExpoFpFplan.Configuration
  public static func downloadFile(_ url: Foundation.URL, _ filePath: Foundation.URL, callback: @escaping (() -> Swift.Void), errorCallback: (() -> Swift.Void)? = nil)
  public static func downloadFiles(_ files: [ExpoFpFplan.FileInfo], _ directory: Foundation.URL!, _ callback: @escaping (() -> Swift.Void))
  public static func getDefaultHtmlFile() -> Swift.String
}
extension ExpoFpFplan.FplanView {
  public func onFpReady(_ callback: @escaping () -> Swift.Void) -> ExpoFpFplan.FplanView
  public func onBoothClick(_ callback: @escaping (_ boothName: Swift.String) -> Swift.Void) -> ExpoFpFplan.FplanView
  public func onBuildDirection(_ callback: @escaping (_ direction: ExpoFpFplan.Direction) -> Swift.Void) -> ExpoFpFplan.FplanView
  public func onMessageReceived(_ callback: @escaping (_ message: Swift.String) -> Swift.Void) -> ExpoFpFplan.FplanView
}
public struct FplanView : SwiftUI.UIViewRepresentable {
  public init()
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: ExpoFpFplan.FplanView.Context) -> ExpoFpFplan.FSWebView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ webView: ExpoFpFplan.FSWebView, context: ExpoFpFplan.FplanView.Context)
  public func destoy()
  public func load(_ url: Swift.String, noOverlay: Swift.Bool = false)
  public func load(_ url: Swift.String, noOverlay: Swift.Bool = false, locationProvider: ExpoFpCommon.LocationProvider? = nil)
  public func load(_ url: Swift.String, noOverlay: Swift.Bool = false, locationProvider: ExpoFpCommon.LocationProvider? = nil, configuration: ExpoFpFplan.Configuration? = nil)
  public func load(_ url: Swift.String, noOverlay: Swift.Bool = false, useGlobalLocationProvider: Swift.Bool = false)
  public func load(_ url: Swift.String, noOverlay: Swift.Bool = false, useGlobalLocationProvider: Swift.Bool = false, configuration: ExpoFpFplan.Configuration? = nil)
  public func selectExhibitor(_ exhibitorName: Swift.String?)
  public func selectBooth(_ boothName: Swift.String?)
  public func buildRoute(_ route: ExpoFpFplan.Route?)
  public func setCurrentPosition(_ position: ExpoFpFplan.BlueDotPoint?, _ focus: Swift.Bool = false)
  public func clear()
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = ExpoFpFplan.FSWebView
}
public struct Line {
  public let startPoint: ExpoFpFplan.Point
  public let endPoint: ExpoFpFplan.Point
  public let weight: Swift.Int
}
extension Foundation.NSURL {
  public func mimeType() -> Swift.String
}
extension Foundation.URL {
  public func mimeType() -> Swift.String
}
extension Foundation.NSString {
  public func mimeType() -> Swift.String
}
extension Swift.String {
  public func mimeType() -> Swift.String
}
public struct Details : Swift.Decodable {
  public let id: Swift.Int
  public let type: Swift.String
  public let name: Swift.String
  public let externalId: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct Configuration : Swift.Codable {
  public let noOverlay: Swift.Bool?
  public let androidHtmlUrl: Swift.String?
  public let iosHtmlUrl: Swift.String?
  public let enablePositioningAfter: Foundation.Date?
  public let disablePositioningAfter: Foundation.Date?
  public let branch: Swift.String?
  public var files: [ExpoFpFplan.FileInfo]
  public init(noOverlay: Swift.Bool?, androidHtmlUrl: Swift.String?, iosHtmlUrl: Swift.String?, enablePositioningAfter: Foundation.Date?, disablePositioningAfter: Foundation.Date?, branch: Swift.String?, files: [ExpoFpFplan.FileInfo])
  public init(from decoder: Swift.Decoder) throws
  public mutating func addFile(_ file: ExpoFpFplan.FileInfo)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Direction {
  public let distance: Swift.String
  public let duration: Foundation.TimeInterval
  public let from: ExpoFpFplan.Booth
  public let to: ExpoFpFplan.Booth
  public let lines: [ExpoFpFplan.Line]
}
public struct FileInfo : Swift.Codable {
  public let name: Swift.String
  public let serverUrl: Swift.String
  public let cachePath: Swift.String
  public let version: Swift.String
  public init(name: Swift.String, serverUrl: Swift.String, cachePath: Swift.String, version: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Route : Swift.Equatable {
  public let from: Swift.String
  public let to: Swift.String
  public let exceptInaccessible: Swift.Bool
  public init(from: Swift.String, to: Swift.String, exceptInaccessible: Swift.Bool)
  public static func == (r1: ExpoFpFplan.Route, r2: ExpoFpFplan.Route) -> Swift.Bool
}
public struct Point : Swift.Decodable, Swift.Equatable {
  public let x: Swift.Int
  public let y: Swift.Int
  public init(x: Swift.Int, y: Swift.Int)
  public static func == (p1: ExpoFpFplan.Point, p2: ExpoFpFplan.Point) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
public struct BlueDotPoint : Swift.Decodable, Swift.Equatable {
  public let x: Swift.Double?
  public let y: Swift.Double?
  public let z: Swift.String?
  public let angle: Swift.Double?
  public let latitude: Swift.Double?
  public let longitude: Swift.Double?
  public init(x: Swift.Double? = nil, y: Swift.Double? = nil, z: Swift.String? = nil, angle: Swift.Double? = nil, latitude: Swift.Double? = nil, longitude: Swift.Double? = nil)
  public static func == (p1: ExpoFpFplan.BlueDotPoint, p2: ExpoFpFplan.BlueDotPoint) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
